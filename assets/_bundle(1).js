NWS.initNamespace('NWS.Display.HeaderAnimation',function(params){return{init:function(params){if(!params.animateClass)return;var scrollFunc=function(evt){var header=document.getElementById(params.headerID);if(!header)return;var position=window.getComputedStyle(header,null).getPropertyValue("position");var top=window.pageYOffset||document.documentElement.scrollTop;if(typeof params.offsetHeight!=="undefined")var offsetH=params.offsetHeight;else var offsetH=(header)?header.offsetHeight:0;if(top>offsetH)header.classList.add(params.animateClass);else header.classList.remove(params.animateClass)};var resizeFunc=function(evt){var header=document.getElementById(params.headerID);if(!header)return;var position=window.getComputedStyle(header,null).getPropertyValue("position"),top=window.pageYOffset||document.documentElement.scrollTop;if(top)header.classList.add(params.animateClass)};window.addEventListener("scroll",scrollFunc,false);window.addEventListener("resize",resizeFunc,false)}}});NWS.initNamespace('NWS.Display.ScrollTop',function(params){return{init:function(params){var scroller=document.getElementById(params.scrollerID);if(scroller==null)return;var scrollFunc=function(evt){var header=document.getElementById(params.headerID);var top=window.pageYOffset||document.documentElement.scrollTop,offsetH=(header)?header.offsetHeight:0;if(top>offsetH)scroller.classList.add("fadeIn");else scroller.classList.remove("fadeIn")};var clickFunc=function(evt){evt.preventDefault();window.scrollTo(0,0);return false};window.addEventListener("scroll",scrollFunc,false);document.getElementById(params.scrollerID).addEventListener("click",clickFunc)}}});NWS.initNamespace("NWS.Display.DOMObserver",function(){var _={params:null,defaultObserverOptions:{root:document.body,rootMargin:'0px',threshold:0.1},lastTimeout:null,mutationObserver:null,intersectionObservers:[],initParams:function(params){_.params=params||{};_.params.observerOptions=_.params.observerOptions||_.defaultObserverOptions},checkForIntersecting:function(intersectionObserver,entries,elementIntersectingCallback,elementStopsIntersectingCallback,elementsActivatedCallback,removeObserverOnIntersect,removeObserverOnStopIntersect){var elementActivated=false;entries.forEach(function(entry){if(entry.isIntersecting){elementActivated=true;if(typeof elementIntersectingCallback==="function")elementIntersectingCallback(entry);if(removeObserverOnIntersect)intersectionObserver.unobserve(entry.target)}else{if(typeof elementStopsIntersectingCallback==="function")elementStopsIntersectingCallback(entry);if(removeObserverOnStopIntersect)intersectionObserver.unobserve(entry.target)}});if(elementActivated&&typeof elementsActivatedCallback==="function")elementsActivatedCallback()}};return{init:function(params){_.initParams(params);if(typeof params.callback==="function")params.callback()},WaitForAddedNodes:function(params){_.initParams(params);if(typeof _.params.nodesExist!=="function"||typeof _.params.init!=="function"){console.error("NWS.Display.DOMObserver.WaitForAddedNodes requires nodesExist function returning boolean and an init function to be run once nodes exist.");return}var navData=window.performance.getEntriesByType("navigation");if(navData.length>0&&navData[0].loadEventEnd>0&&_.params.nodesExist()){_.params.init();return}_.mutationObserver=new MutationObserver(function(mutations){if(_.lastTimeout)clearTimeout(_.lastTimeout);_.lastTimeout=setTimeout(function(){if(_.params.nodesExist()){_.mutationObserver.disconnect();_.params.init()}},_.params.checkDelayMS||10)},_.params.observerOptions);_.mutationObserver.observe(_.params.rootNode||document,{subtree:!!params.observeSubtree,childList:!!params.observeSubtree||!!params.observeChildren,attributes:!!params.observeAttributes},_.params.observerOptions)},AddIntersectionObserver:function(observedElementSelector,elementIntersectingCallback,elementStopsIntersectingCallback,elementsActivatedCallback,options,removeObserverOnIntersect,removeObserverOnStopIntersect){_.params=_.params||{};_.params.observerOptions=options||_.params.observerOptions||_.params.defaultObserverOptions;if(typeof IntersectionObserver==="undefined"){console.warn("Intersection observer functionality not available.  Executing callbacks.");document.querySelectorAll(observedElementSelector).forEach(function(el){elementActivatedCallback(el)});elementsActivatedCallback();return}var observer=_.intersectionObservers.filter(_observer=>_observer.observedElementSelector==observedElementSelector)[0];if(!observer){observer={observedElementSelector:observedElementSelector,intersectionObserver:new IntersectionObserver(function(entries){_.checkForIntersecting(this,entries,elementIntersectingCallback,elementStopsIntersectingCallback,elementsActivatedCallback,removeObserverOnIntersect,removeObserverOnStopIntersect)},_.params.observerOptions)};_.intersectionObservers.push(observer)}document.querySelectorAll(observedElementSelector).forEach(function(el){observer.intersectionObserver.observe(el)})},Closest:function(el,selector){if(!el)return null;var closest=el.querySelector(selector);if(!closest)return NWS.Display.DOMObserver.Closest(el.parentNode,selector);return closest}}})